# Copyright (c) 2014-2016, The Regents of the University of California.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import scapy.all as scapy
import socket
from scapy.contrib.nsh import NSH

def aton(ip):
    return socket.inet_aton(ip)

# Craft a packet with the specified IP addresses
def gen_packet(proto, src_ip, dst_ip, spi, si):
    eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32', type=0x894F)
    nsh = NSH(NSP=spi, NSI=si)
    ip = scapy.IP(src=src_ip, dst=dst_ip)
    udp = proto(sport=10001, dport=10002)
    payload = 'helloworld'
    pkt = eth/nsh/ip/udp/payload
    return bytes(pkt)

packets = [gen_packet(scapy.UDP, '172.16.100.1', '10.0.0.1', 100, 1),
           gen_packet(scapy.UDP, '172.12.55.99', '12.34.56.78', 100, 2),
           gen_packet(scapy.UDP, '172.12.55.99', '10.0.0.1', 50, 1),
           gen_packet(scapy.UDP, '172.16.100.1', '12.34.56.78', 50, 2),
           gen_packet(scapy.TCP, '172.12.55.99', '12.34.56.78', 100, 1),
           gen_packet(scapy.UDP, '192.168.1.123', '12.34.56.78', 50, 1),
          ]

# L4 protocol and source/destination IP addresses

em::ExactMatch(fields=[{'attr_name':'nsh_spi', 'num_bytes':3},
                       {'attr_name':'nsh_si', 'num_bytes':1}])

Source() -> Rewrite(templates=packets) -> NSHdecap(new_spi='10', new_si='1') ->em


em:0 -> NSHencap(new_spi='50', new_si='4') -> Sink()
em:1 -> NSHencap(new_spi='100', new_si='3') -> Sink()
em:2 -> Sink()
em:5 -> Sink()   # used as default gate

em.add(fields=[{'value_bin':'\x00\x00\x64'}, {'value_int':1}], gate=1)
em.add(fields=[{'value_bin':'\x00\x00\x32'}, {'value_int':1}], gate=0)
em.add(fields=[{'value_bin':'\x00\x00\x32'}, {'value_int':2}], gate=2)

# delete test
#em.add(fields=[{'value_bin':chr(17)}, {'value_bin':aton('192.168.1.123')}, {'value_bin':aton('12.34.56.78')}], gate=3)
#em.delete(fields=[{'value_bin':chr(17)}, {'value_bin':aton('192.168.1.123')}, {'value_bin':aton('12.34.56.78')}])

em.set_default_gate(gate=5)
